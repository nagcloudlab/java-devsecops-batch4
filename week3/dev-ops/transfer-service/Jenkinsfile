pipeline {
    agent any

    environment {
        SONAR_HOST_URL = "http://localhost:9000"
        SONAR_PROJECT_KEY = 'transfer-service'
    }

    stages {
        stage("üì¶ Compile") {
            steps {
                dir("week3/dev-ops/transfer-service") {
                    sh "./mvnw compile"
                }
            }
        }

        stage("üß™ Test") {
            steps {
                dir("week3/dev-ops/transfer-service") {
                    sh "./mvnw test"
                }
            }
            post {
                always {
                    junit "week3/dev-ops/transfer-service/target/surefire-reports/*.xml"
                }
            }
        }

        stage("üîê SonarQube Static Code Scan") {
            environment {
                SONAR_TOKEN = credentials('sonar-token') // from Jenkins credentials
            }
            steps {
                dir("week3/dev-ops/transfer-service") {
                    echo 'üì° Sending code to SonarQube for static analysis...'
                    withSonarQubeEnv('SonarQube') {
                        sh """
                            ./mvnw verify sonar:sonar \
                              -Dsonar.projectKey=$SONAR_PROJECT_KEY \
                              -Dsonar.host.url=$SONAR_HOST_URL \
                              -Dsonar.login=$SONAR_TOKEN
                        """
                    }
                }
            }
        }

        stage("üö¶ Sonar Quality Gate Check") {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage("üì¶ Package") {
            steps {
                dir("week3/dev-ops/transfer-service") {
                    sh "./mvnw package -DskipTests"
                }
            }
        }

        stage("üîç OWASP Dependency Scan") {
            steps {
                dir("week3/dev-ops/transfer-service") {
                    sh './mvnw org.owasp:dependency-check-maven:check'
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'week3/dev-ops/transfer-service/target/dependency-check-report.html', allowEmptyArchive: true
                    publishHTML(target: [
                        reportDir: 'week3/dev-ops/transfer-service/target',
                        reportFiles: 'dependency-check-report.html',
                        reportName: 'OWASP Dependency Report'
                    ])
                }
            }
        }

        stage("üöÄ Deploy") {
            steps {
                withCredentials([file(credentialsId: 'nexus-cred-xml', variable: 'SETTINGS_XML')]) {
                    dir('week3/dev-ops/transfer-service') {
                        sh './mvnw deploy -DskipTests -s $SETTINGS_XML'
                    }
                }
            }
        }
    }

    post {
        always {
            echo "========always========"
        }
        success {
            echo "‚úÖ Pipeline executed successfully"
        }
        failure {
            echo "‚ùå Pipeline execution failed"
        }
    }
}
